def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
// 本地编译注释以下代码
// start
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// end
android {
    compileSdkVersion 32

    sourceSets {
    }
    lintOptions {
        disable 'InvalidPackage'
    }
    defaultConfig {
        applicationId "com.nightmare.speedshare"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    signingConfigs {
        // 本地编译注释以下代码
        // start
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
        // end
    }
    // 本地编译放开下面代码
    // buildTypes {    
    //     release {
    //         signingConfig signingConfigs.debug
    //     }
    //     debug {
    //         signingConfig signingConfigs.debug
    //     }
    // }
    // 本地编译注释下面代码
    // start
    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    // end
    project.android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = flutterVersionCode.toInteger()
        }
    }
}

flutter {
    source '../..'
}

dependencies {
}
