#------ 1. 发版时，生成bridge工程的配置 dvm tools 读取此配置，写入bridgeProject指定的bridge工程---------
bridgeConfig:

  # 生成bridge工程的范围控制
  generator:
    enable: true

    patchableLibrary:
      libraryUris: ['package:benchmark/dvm_test.dart']
      packageNames: ['benchmark']


    nestBridge:
      dartCore: false
      flutterCore: false
      others: [] # dart:xxx, package:xxx/yyy.dart, package:xxx

    generic:
      typeCount: 10

  # flutter根组件的配置
  rootProject:
    # path
    git:
      url: git@git.xiaojukeji.com:lorimaoyang/benchmark.git
      ref: master

  # 编译器会根据rootProject和generator指定的范围，写入文件，并commit
  # bridgeProject:
  #   # path
  #   git:
  #     url: git@git.xiaojukeji.com:IBT-Flutter/dvm_tester_bridge.git
  #     ref: master

  bridgeProject:
    # path
    git:
      url: git@git.xiaojukeji.com:lorimaoyang/benchmakr_bridge.git
      ref: master


#------ 2. 发patch时的配置，编译器会读取此配置，生成patch包--------

patchConfig:

  # 要patch组件的地址和commit （基于之前发版commit，已经修改后的）
  patchProject:
    # 有@DVMEntry注解所在的文件路径
    entryPoint: lib/dvm_test.dart
    # path: ../
    # 已经修复了的代码的git地址和分支
    git:
      url: git@git.xiaojukeji.com:lorimaoyang/benchmark.git
      ref: master

  # 线上版本的bridge工程的git地址和tag，在dvm_tool生成Bridge工程时会生成dvmMeta.json文件记录生成Bridge时的信息
  # releaseBridgeProject:
  #   git:
  #     url: git@git.xiaojukeji.com:IBT-Flutter/dvm_tester_bridge.git
  #     ref: master

  releaseBridgeProject:
    git:
      url: git@git.xiaojukeji.com:lorimaoyang/benchmakr_bridge.git
      ref: DVM_1.1.19_20221123161003

  # patch的控制信息
  patchInfo:
    # 如果为auto，或者空，则由编译器自动生成
    id: auto
    # patch的版本号，若空，则由编译器自动生成
    version: 2
    # 要生效的app版本号，支持多个
    appVersion: [ '1.0.0']
    # 1：下发新的patch或更新新的patch，2：回归（删除）指定的patch
    action: 1

  # 输出的格式 json / binary，线上发布选择 binary
  outputType: binary
  # 是否启用 String Table，outputType=binary是生效，启用能减少包大小
  enableStringTable: false

